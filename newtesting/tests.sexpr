;; ((<test group name> <use default database?>
;;   (<test0>)
;;   (<test1>)))

 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;;       single insert
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(("SingleInsert" t
  ("CREATE TABLE test_insert (id integer , age integer, salary integer, address text, name text)"
   (:all-max "test_insert"))
  ("INSERT INTO test_insert VALUES (1, 21, 100, '24 Rosedale, Toronto, ONT', 'Pat Carlson')"
   :check)
  ("SELECT * FROM test_insert")
  ("INSERT INTO test_insert (id, age, salary, address, name)
         VALUES (2, 23, 101, '25 Rosedale, Toronto, ONT', 'Pat Carlson2')")
  ("SELECT * FROM test_insert")
  ("INSERT INTO test_insert (age, address, salary, name, id)
                     VALUES (25, '26 Rosedale, Toronto, ONT', 102, 'Pat2 Carlson', 3)")
  ("SELECT * FROM test_insert")
  ("INSERT INTO test_insert (age, address, salary, name) VALUES (26, 'test address', 30, 'test name')")
  ("SELECT * FROM test_insert")
  ("INSERT INTO test_insert (age, address, salary, name) VALUES (27, 'test address2', 31, 'test name')")
  ("INSERT INTO test_insert (age) VALUES (40)")
  ("SELECT age FROM test_insert")
  ("INSERT INTO test_insert (name) VALUES ('Wendy')")
  ("SELECT name FROM test_insert WHERE id=10"
   (:update test_insert id oDET DET))
  ("INSERT INTO test_insert (name, address, id, age)
                     VALUES ('Peter Pan', 'first star to the right and straight on till morning', 42, 10)")
  ("SELECT name, address, age FROM test_insert WHERE id=42")
  ("DROP TABLE test_insert"))
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;;      single select
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ("SingleSelect" t
  ("CREATE TABLE IF NOT EXISTS test_select (id integer, age integer, salary integer, address text, name text)"
   (:all-max "test_select"))
  ("INSERT INTO test_select
         VALUES (1, 10, 0, 'first star to the right and straight on till morning', 'Peter Pan')")
  ("INSERT INTO test_select VALUES (2, 16, 1000, 'Green Gables', 'Anne Shirley')")
  ("INSERT INTO test_select VALUES (3, 8, 0, 'London', 'Lucy')")
  ("INSERT INTO test_select VALUES (4, 10, 0, 'London', 'Edmund')")
  ("INSERT INTO test_select VALUES (5, 30, 100000, '221B Baker Street', 'Sherlock Holmes')")
  ("SELECT * FROM test_select WHERE id IN (1, 2, 10, 20, 30)"
   (:update test_select id oDET DET))
  ("SELECT * FROM test_select WHERE id BETWEEN 3 AND 5"
   (:update test_select id oOPE OPE))
  ("SELECT NULLIF(1, id) FROM test_select")
  ("SELECT NULLIF(id, 1) FROM test_select")
  ("SELECT NULLIF(id, id) FROM test_select")
  ("SELECT NULLIF(1, 2) FROM test_select")
  ("SELECT NULLIF(1, 1) FROM test_select")
  ("SELECT * FROM test_select")
  ("SELECT max(id) FROM test_select")
  ("SELECT max(salary) FROM test_select"
   (:update test_select salary oOPE OPE))
  ("SELECT COUNT(*) FROM test_select")
  ("SELECT COUNT(DISTINCT age) FROM test_select"
   (:update test_select age oDET DET))
  ("SELECT COUNT(DISTINCT(address)) FROM test_select"
   (:update test_select address oDET DET))
  ("SELECT name FROM test_select")
  ("SELECT address FROM test_select")
  ("SELECT * FROM test_select WHERE id>3")
  ("SELECT * FROM test_select WHERE age = 8")
  ("SELECT * FROM test_select WHERE salary=15"
   (:update test_select salary oDET DET))
  ("SELECT * FROM test_select WHERE age > 10"
   (:update test_select age oOPE OPE))
  ("SELECT * FROM test_select WHERE age = 10 AND salary = 0")
  ("SELECT * FROM test_select WHERE age = 10 OR salary = 0")
  ("SELECT * FROM test_select WHERE name = 'Peter Pan'"
   (:update test_select name oDET DET))
  ("SELECT * FROM test_select WHERE address='Green Gables'")
  ("SELECT * FROM test_select WHERE address <= '221C'"
   (:update test_select address oOPE OPE))
  ("SELECT * FROM test_select WHERE address >= 'Green Gables' AND age > 9")
  ("SELECT * FROM test_select WHERE address >= 'Green Gables' OR age > 9")
  ("SELECT * FROM test_select WHERE address < 'ffFFF'")
  ("SELECT * FROM test_select ORDER BY id")
  ("SELECT * FROM test_select ORDER BY salary")
  ("SELECT * FROM test_select ORDER BY name"
   (:update test_select name oOPE OPE))
  ("SELECT * FROM test_select ORDER BY address")
  ("SELECT sum(age) FROM test_select GROUP BY address ORDER BY address")
  ("SELECT salary, max(id) FROM test_select GROUP BY salary ORDER BY salary")
  ("SELECT * FROM test_select GROUP BY age ORDER BY age")
  ("SELECT * FROM test_select ORDER BY age ASC") ("SELECT * FROM test_select ORDER BY address DESC")
  ("SELECT sum(age) as z FROM test_select")
  ("SELECT sum(age) z FROM test_select")
  ("SELECT min(t.id) a FROM test_select AS t")
  ("SELECT t.address AS b FROM test_select t")
  ("SELECT * FROM test_select HAVING age"
   (:update test_select age oPLAIN PLAINVAL))
  ("SELECT * FROM test_select HAVING age && id"
   (:check))
  ("DROP TABLE test_select"))
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;;         subquery
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ("SubQuery" t
  ("CREATE TABLE subqueryphun (morse integer, code integer)")
  ("CREATE TABLE numerouno (uno integer, dos integer, tres integer)")
  ("INSERT INTO subqueryphun VALUES (100, 200), (1000, 2000),
                                    (200, 100), (25, 25), (50, 50)")
  ("INSERT INTO numerouno VALUES (1, 2, 3), (100, 200, 300),
                                 (1000, 2000, 3000)")
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;  single row subqueries
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; bad query, subquery returns multiple rows
  ("SELECT * FROM subqueryphun
     WHERE (SELECT code FROM subqueryphun)")
  ("SELECT * FROM subqueryphun
     WHERE (SELECT code FROM subqueryphun LIMIT 1)")
  ("SELECT * FROM subqueryphun
     WHERE morse IN (SELECT morse FROM subqueryphun)")
  ("SELECT * FROM subqueryphun
     wHERE morse IN (SELECT 100 FROM subqueryphun)")
  ("SELECT * FROM subqueryphun
     WHERE (SELECT 1 FROM subqueryphun AS q WHERE q.morse
             LIMIT 1)")
  ;; use a table from higher level select in subquery
  ("SELECT * FROM numerouno
     WHERE (SELECT dos FROM subqueryphun
             WHERE subqueryphun.morse = numerouno.uno
             LIMIT 1)")
  ;; use an alias from higher level select in subquery
  ("SELECT * FROM numerouno AS n1
     WHERE (SELECT tres FROM subqueryphun
             WHERE subqueryphun.morse = n1.uno
             LIMIT 1)")
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;      IN subqueries
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ("SELECT * FROM subqueryphun
     WHERE morse IN (SELECT morse FROM subqueryphun)")
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;    EXISTS subqueries
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ("SELECT * FROM subqueryphun
     WHERE EXISTS(SELECT * FROM subqueryphun)")
  ("SELECT * FROM numerouno as n1
     WHERE EXISTS(SELECT * FROM subqueryphun
                   WHERE subqueryphun.morse = n1.uno)")
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;    misc subquery bugs
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; summation in subquery was causing segfault
  ("SELECT (SELECT SUM(uno) FROM numerouno)")
  ("SELECT * FROM numerouno WHERE (SELECT SUM(uno) FROM numerouno)")
  ("DROP TABLE subqueryphun")
  ("DROP TABLE numerouno"))
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;         single join
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ("SingleJoin" t
  ("CREATE TABLE test_join1 (id integer, age integer, salary integer, address text, name text)"
   (:all-max test_join1))
  ("CREATE TABLE test_join2 (id integer, books integer, name text)"
   (:all-max test_join2))
  ("INSERT INTO test_join1 VALUES (1, 10, 0, 'first star to the right and straight on till morning','Peter Pan')")
  ("INSERT INTO test_join1 VALUES (2, 16, 1000, 'Green Gables', 'Anne Shirley')")
  ("INSERT INTO test_join1 VALUES (3, 8, 0, 'London', 'Lucy')")
  ("INSERT INTO test_join1 VALUES (4, 10, 0, 'London', 'Edmund')")
  ("INSERT INTO test_join1 VALUES (5, 30, 100000, '221B Baker Street', 'Sherlock Holmes')")
  ("INSERT INTO test_join2 VALUES (1, 6, 'Peter Pan')")
  ("INSERT INTO test_join2 VALUES (2, 8, 'Anne Shirley')")
  ("INSERT INTO test_join2 VALUES (3, 7, 'Lucy')")
  ("INSERT INTO test_join2 VALUES (4, 7, 'Edmund')")
  ("INSERT INTO test_join2 VALUES (10, 4, '221B Baker Street')")
  ("SELECT address FROM test_join1, test_join2 WHERE test_join1.id=test_join2.id"
   (:update (test_join1 (id (oDET DETJOIN)))
            (test_join2 (id (oDET DETJOIN)))))
  ("SELECT test_join1.id, test_join2.id, age, books, test_join2.name FROM test_join1, test_join2
     WHERE test_join1.id = test_join2.id")
  ("SELECT test_join1.name, age, salary, test_join2.name, books FROM test_join1, test_join2
     WHERE test_join1.age=test_join2.books"
   (:update (test_join1 (age (oDET DETJOIN)))
            (test_join2 (books (oDET DETJOIN)))))
  ("SELECT * FROM test_join1, test_join2 WHERE test_join1.name=test_join2.name"
   (:update (test_join1 (name (oDET DETJOIN)))
            (test_join2 (name (oDET DETJOIN)))))
  ("SELECT * FROM test_join1, test_join2 WHERE test_join1.address=test_join2.name"
   (:update (test_join1 (address (oDET DETJOIN)))))
  ("SELECT address FROM test_join1 AS a, test_join2 WHERE a.id=test_join2.id")
  ("SELECT a.id, b.id, age, books, b.name FROM test_join1 a, test_join2 AS b WHERE a.id=b.id")
  ("SELECT test_join1.name, age, salary, b.name, books FROM test_join1, test_join2 b
     WHERE test_join1.age = b.books"
   :check)
  ("DROP TABLE test_join1")
  ("DROP TABLE test_join2"))
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;         single update
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ("SingleUpdate" t
  ("CREATE TABLE test_update (id integer, age integer, salary integer, address text, name text)"
   (:all-max test_update))
  ("INSERT INTO test_update VALUES (1, 10, 0, 'first star to the right and straight on till morning','Peter Pan')")
  ("INSERT INTO test_update VALUES (2, 16, 1000, 'Green Gables', 'Anne Shirley')")
  ("INSERT INTO test_update VALUES (3, 8, 0, 'London', 'Lucy')")
  ("INSERT INTO test_update VALUES (4, 10, 0, 'London', 'Edmund')")
  ("INSERT INTO test_update VALUES (5, 30, 100000, '221B Baker Street', 'Sherlock Holmes')")
  ("INSERT INTO test_update VALUES (6, 11, 0 , 'hi', 'no one')")
  ("SELECT * FROM test_update")
  ("UPDATE test_update SET age = age, address = name")
  ("SELECT * FROM test_update")
  ("UPDATE test_update SET name = address")
  ("SELECT * FROM test_update")
  ("UPDATE test_update SET salary=0")
  ("SELECT * FROM test_update")
  ("UPDATE test_update SET age=21 WHERE id = 6"
   (:update test_update id oDET DET))
  ("SELECT * FROM test_update")
  ("UPDATE test_update SET address='Pemberly', name='Elizabeth Darcy' WHERE id=6")
  ("SELECT * FROM test_update")
  ("UPDATE test_update SET salary=55000 WHERE age=30"
   (:update test_update age oDET DET))
  ("SELECT * FROM test_update")
  ("UPDATE test_update SET salary=20000 WHERE address='Pemberly'"
   (:update test_update address oDET DET))
  ("SELECT * FROM test_update")
  ("SELECT age FROM test_update WHERE age > 20"
   (:update test_update age oOPE OPE))
  ("SELECT id FROM test_update")
  ("SELECT sum(age) FROM test_update")
  ("UPDATE test_update SET age=20 WHERE name='Elizabeth Darcy'"
   (:update test_update name oDET DET))
  ("SELECT * FROM test_update WHERE age > 20")
  ("SELECT sum(age) FROM test_update")
  ("UPDATE test_update SET age = age + 2")
  ("SELECT age FROM test_update")
  ("UPDATE test_update SET id = id + 10, salary = salary + 19, name = 'xxx', address = 'foo'
     WHERE address = 'London'")
  ("SELECT * FROM test_update")
  ("SELECT * FROM test_update WHERE address < 'fml'"
   (:update test_update address oOPE OPE))
  ("UPDATE test_update SET address = 'Neverland' WHERE id=1")
  ("SELECT * FROM test_update")
  ("DROP TABLE test_update")))




